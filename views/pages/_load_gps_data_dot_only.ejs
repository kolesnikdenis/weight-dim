<!DOCTYPE html>
<html>
  <head>
    <title>Tracking our Car</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div id="map"></div>
    <script>

var RotateIcon = function(options){
    this.options = options || {};
    this.rImg = options.img || new Image();
    this.rImg.src = this.rImg.src || this.options.url || '';
    this.options.width = this.options.width || this.rImg.width || 52;
    this.options.height = this.options.height || this.rImg.height || 60;
    var canvas = document.createElement("canvas");
    canvas.width = this.options.width;
    canvas.height = this.options.height;
    this.context = canvas.getContext("2d");
    this.canvas = canvas;
};
RotateIcon.makeIcon = function(url) {
    return new RotateIcon({url: url});
};
RotateIcon.prototype.setRotation = function(options){
    var canvas = this.context,
        angle = options.deg ? options.deg * Math.PI / 180:
            options.rad,
        centerX = this.options.width/2,
        centerY = this.options.height/2;

    canvas.clearRect(0, 0, this.options.width, this.options.height);
    canvas.save();
    canvas.translate(centerX, centerY);
    canvas.rotate(angle);
    canvas.translate(-centerX, -centerY);
    canvas.drawImage(this.rImg, 0, 0);
    canvas.restore();
    return this;
};
RotateIcon.prototype.getUrl = function(){
    return this.canvas.toDataURL('image/png');
};
var map;
function initMap() {
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 50.15, lng: 36.25},
mapTypeId: google.maps.MapTypeId.SATELLITE,
    zoom:14,
  }); 
var beaches1=[
<%- gps_coordinat %>
];
beaches1 = beaches1[0];
setMarkers(map);
function setMarkers(map) {
  for (var i = 0; i < beaches1.length; i++) {
    var beach = beaches1[i];
    console.log(beach);
    if ( beach[4] == 0 ) {
	var image = {
                fillOpacity: .5,
                strokeWeight: 0,
                path: 'M25.432,25.889c-0.882,3.419-0.314,6.74,0.131,9.789l1.394,1.536c0.011-0.06,0.021-0.119,0.029-0.181c-0.82-3.025,0.041-6.394,2.521-8.646c1.658-1.504,3.74-2.244,5.815-2.239c2.075-0.005,4.157,0.734,5.816,2.239c2.478,2.253,3.34,5.621,2.518,8.646c0.01,0.061,0.02,0.121,0.029,0.18l1.396-1.535c0.443-3.034,1.018-6.34,0.142-9.742c-1.838-7.152-6.812-14.732-9.901-21.116l0,0C32.239,11.19,27.276,18.749,25.432,25.889z',
                rotation: beach[3],
                anchor: new google.maps.Point(32, 30),
                scaledSize: new google.maps.Size(20, 20),
	}
    } else {
	var image = {
	 url: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png',
	 // This marker is 20 pixels wide by 32 pixels high.
	 size: new google.maps.Size(20, 32),
	 // The origin for this image is (0, 0).
	 origin: new google.maps.Point(0, 0),
	 // The anchor for this image is the base of the flagpole at (0, 32).
	 anchor: new google.maps.Point(0, 32)
	};
    }
    var marker = new google.maps.Marker({
      position: {lat: beach[1], lng: beach[2]},
      map: map,
      icon: image,
      title: beach[0],
    });
    attachSecretMessage(marker,beach[0]+"<br>"+beach[3]);

  }
}
function attachSecretMessage(marker, secretMessage) {
  var infowindow = new google.maps.InfoWindow({
    content: secretMessage
  });

  marker.addListener('click', function() {
    infowindow.open(marker.get('map'), marker);
  });
}
 var markers = [];
function addMarkerWithTimeout(position, timeout) {
  window.setTimeout(function() {
    labelIndex++;
    markers.push(new google.maps.Marker({
      position: position,
      map: map,
      animation: google.maps.Animation.DROP,
      label: labelIndex+""
    }));
  }, timeout);
}


var flightPlanCoordinates=[];
for (var i = 0; i < beaches1.length; i++) {
 var beach = beaches1[i];
 flightPlanCoordinates.push( {lat: beach[1], lng: beach[2]} );
}
  var flightPath = new google.maps.Polyline({
    path: flightPlanCoordinates,
    geodesic: true,
    strokeColor: '#00FFFF',
    strokeOpacity: 3.0,
    strokeWeight: 3
  });
  flightPath.setMap(map);
}

 </script>
 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDPo7UL2B9sxTrqB5QQfavKz4CGcbgTvBo&callback=initMap" async defer></script>
 </body>
</html>

